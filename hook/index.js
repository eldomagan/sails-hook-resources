const util = require('util')
const { validations } = require('indicative')
const { eachObjectValues, someObjectValues } = require('./utils')

const existsRule = require('./validation/rules/exists')
const uniqueRule = require('./validation/rules/unique')
const configureModel = require('./utils/configure-model')

const ResourceController = {
  find: require('./actions/find'),
  findOne: require('./actions/findOne'),
  create: require('./actions/create'),
  update: require('./actions/update'),
  destroy: require('./actions/destroy'),
  findRelation: require('./actions/findRelation'),
  addRelation: require('./actions/addRelation')
}

module.exports = function resources (sails) {
  let hook

  return {
    /**
     * Default configuration to merge w/ top-level `sails.config`
     * @type {Object}
     */
    defaults: {
      __configKey__: {
        prefix: '',
        paths: {
          validators: 'resources/validators',
          transformers: 'resources/transformers',
          observers: 'resources/observers'
        },
        pagination: {
          limit: 30
        }
      }
    },

    configure: function () {
      // Disable default blueprints as we don't need them
      sails.config.blueprints = false

      // Custom validation rules
      validations.exists = existsRule
      validations.unique = uniqueRule
    },

    initialize: function (cb) {
      hook = this

      sails.log.info('Initializing hook (`resources`)')

      // If the ORM hook is active, wait for it to load, then create actions
      // for each model.
      if (sails.hooks.orm) {
        // Wait until after user routes have been bound to bind our
        // own RESTful routes
        sails.on('router:after', hook.bindResourcesRoutes)

        sails.after('hook:orm:loaded', function() {
          hook.configureModels(function () {
            hook.registerActions(cb)
          })
        })
      }
      // Otherwise we're done!
      else {
        sails.log.warn('ORM hook is disabled. resources can not work without ORM hook')
        return cb();
      }
    },

    bindResourcesRoutes: function () {
      const logWarns = function(warns) {
        sails.log.blank()
        warns.forEach(warn => {
          sails.log.warn(warn)
        })
      }

      // Local reference to the rest api config.
      const config = sails.config[this.configKey]

      // Validate prefix for RestFul routes.
      if ( config.prefix ) {
        if (typeof config.prefix !== 'string') {
          sails.after('lifted', function () {
            logWarns([
              'Ignoring invalid rest api prefix configured for controllers.',
              '`prefix` should be a string, e.g. "/api/v1".'
            ])
          })

          return
        }

        if ( !config.prefix.match(/^\//) ) {
          const originalPrefix = config.prefix;
          sails.after('lifted', function () {
            logWarns([
              util.format('Invalid blueprint prefix ("%s") configured for controllers.', originalPrefix),
              util.format('For now, assuming you meant:  "/%s".', config.prefix)
            ])
          })

          config.prefix = '/' + config.prefix
        }
      }

      // Loop throug each model and register RESTFul routes
      eachObjectValues(sails.models, (Model, identity) => {
        // We ignore models where resource is explicitly disable
        // And also those generated by sails
        if (Model.resource && identity.indexOf('__') === -1) {
          // Find many
          sails.router.bind(
            'GET ' + Model.resource.url,
            `resources/${identity}/find`,
            null,
            { _model: identity }
          )

          // Find one
          sails.router.bind(
            'GET ' + Model.resource.url + '/:id',
            'resources/' + identity + '/find-one',
            null,
            { _model: identity }
          )

          // Create
          sails.router.bind(
            'POST ' + Model.resource.url,
            'resources/' + identity + '/create',
            null,
            { _model: identity }
          )

          // Update
          sails.router.bind(
            'PUT ' + Model.resource.url + '/:id',
            'resources/' + identity + '/update',
            null,
            { _model: identity }
          )

          sails.router.bind(
            'PATCH ' + Model.resource.url + '/:id',
            'resources/' + identity + '/update',
            null,
            { _model: identity }
          )

          // DELETE
          sails.router.bind(
            'DELETE ' + Model.resource.url + '/:id',
            'resources/' + identity + '/destroy',
            null,
            { _model: identity }
          )

          // Relations
          Model.associations.forEach(assoc => {
            // Get relation
            sails.router.bind(
              `GET ${Model.resource.url}/:parentId/${assoc.alias}`,
              `resources/${identity}/find-${assoc.alias}`,
              null,
              {
                _relation: assoc.alias,
                _via: assoc.via,
                _model: assoc.model || assoc.collection,
                _parent: identity,
                _type: assoc.type
              }
            )

            if (assoc.type === 'collection') {
              // Get relation by id
              sails.router.bind(
                `GET ${Model.resource.url}/:parentId/${assoc.alias}/:id`,
                `resources/${identity}/find-${assoc.alias}`,
                null,
                {
                  _relation: assoc.alias,
                  _via: assoc.via,
                  _model: assoc.model || assoc.collection,
                  _parent: identity
                }
              )

              // Add item to relation collection
              sails.router.bind(
                `POST ${Model.resource.url}/:parentId/${assoc.alias}`,
                `resources/${identity}/add-${assoc.alias}`,
                null,
                {
                  _relation: assoc.alias,
                  _via: assoc.via,
                  _model: assoc.model || assoc.collection,
                  _parent: identity
                }
              )
            }
          })
        }
      })
    },

    configureModels: function (cb) {
      const config = sails.config[this.configKey]
      const appPath = sails.config.appPath

      // Determine whether any model is using the default archive model.
      const defaultArchiveInUse = someObjectValues(sails.models, function(model) {
        return model.archiveModelIdentity === 'archive'
      })

      eachObjectValues(sails.models, (Model, identity) => {
        if (identity === 'archive' && defaultArchiveInUse ||
          identity.indexOf('__') !== -1
        ) {
          return
        }

        configureModel(Model, appPath, config)
      })

      return cb()
    },

    registerActions: function (cb) {
      // Determine whether any model is using the default archive model.
      const defaultArchiveInUse = someObjectValues(sails.models, function(model) {
        return model.archiveModelIdentity === 'archive'
      })

      // Loop through all of the loaded models and add actions for each.
      // Even though we're adding the same exact actions for each model,
      // (e.g. user/list and pet/list are the same), it's important that
      // each model gets its own set so that they can have different
      // action middleware (e.g. policies) applied to them.
      eachObjectValues(sails.models, (Model, identity) => {
        if (identity === 'archive' && defaultArchiveInUse ||
          Model.resource === false ||
          identity.indexOf('__') !== -1
        ) {
          return
        }

        sails.registerAction(ResourceController.find, 'resources/' + identity + '/find')
        sails.registerAction(ResourceController.findOne, 'resources/' + identity + '/find-one')
        sails.registerAction(ResourceController.create, 'resources/' + identity + '/create')
        sails.registerAction(ResourceController.update, 'resources/' + identity + '/update')
        sails.registerAction(ResourceController.destroy, 'resources/' + identity + '/destroy')

        Model.associations.forEach(assoc => {
          sails.registerAction(
            ResourceController.findRelation,
            `resources/${identity}/find-${assoc.alias}`
          )

          if (assoc.type === 'collection') {
            sails.registerAction(
              ResourceController.addRelation,
              `resources/${identity}/add-${assoc.alias}`
            )
          }
        })
      })

      return cb()
    }
  }
}
